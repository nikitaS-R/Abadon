{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useRef, useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport PerntagramSvg from \"../assets/svg/Pentagram\";\nimport { Audio } from \"expo-av\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar Exile = function Exile() {\n  var _useState = useState(0),\n    _useState2 = _slicedToArray(_useState, 2),\n    isPress = _useState2[0],\n    setIsPress = _useState2[1];\n  var _useState3 = useState(),\n    _useState4 = _slicedToArray(_useState3, 2),\n    sound1 = _useState4[0],\n    setSound1 = _useState4[1];\n  var _useState5 = useState(),\n    _useState6 = _slicedToArray(_useState5, 2),\n    sound2 = _useState6[0],\n    setSound2 = _useState6[1];\n  var anim = useRef(new Animated.Value(0)).current;\n  var callTime = 10000;\n  var resetTime = 1000;\n  var onPernagramPress = function () {\n    var _ref = _asyncToGenerator(function* (e) {\n      var _yield$Audio$Sound$cr = yield Audio.Sound.createAsync(require(\"../../assets/sounds/excorcism.mp3\")),\n        sound = _yield$Audio$Sound$cr.sound;\n      setSound1(sound);\n      sound.setVolumeAsync(1);\n      yield sound.playAsync();\n      sound2.unloadAsync();\n      Animated.timing(anim, {\n        toValue: 100,\n        duration: callTime,\n        useNativeDriver: true\n      }).start();\n      anim.addListener(function (_ref2) {\n        var value = _ref2.value;\n        return setIsPress(value);\n      });\n    });\n    return function onPernagramPress(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var onPernagramPressOut = function () {\n    var _ref3 = _asyncToGenerator(function* (event) {\n      var _yield$Audio$Sound$cr2 = yield Audio.Sound.createAsync(require(\"../../assets/sounds/woman.mp3\")),\n        sound = _yield$Audio$Sound$cr2.sound;\n      setSound2(sound);\n      sound.setVolumeAsync(1);\n      yield sound.playAsync();\n      if (isPress < 100) {\n        Animated.timing(anim, {\n          toValue: 0,\n          duration: resetTime,\n          useNativeDriver: true\n        }).start();\n        setIsPress(0);\n      }\n      sound1.unloadAsync();\n    });\n    return function onPernagramPressOut(_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  return _jsx(Animated.View, {\n    style: styled.exileContainer,\n    children: _jsx(TouchableOpacity, {\n      onPressIn: onPernagramPress,\n      onPressOut: onPernagramPressOut,\n      children: _jsx(PerntagramSvg, {\n        isPress: isPress\n      })\n    })\n  });\n};\nvar styled = StyleSheet.create({\n  exileContainer: {\n    flex: 1,\n    backgroundColor: \"#64262C\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  }\n});\nexport default Exile;","map":{"version":3,"names":["useRef","useState","PerntagramSvg","Audio","Exile","isPress","setIsPress","sound1","setSound1","sound2","setSound2","anim","Animated","Value","current","callTime","resetTime","onPernagramPress","e","Sound","createAsync","require","sound","setVolumeAsync","playAsync","unloadAsync","timing","toValue","duration","useNativeDriver","start","addListener","value","onPernagramPressOut","event","styled","exileContainer","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent"],"sources":["C:/Work/mobile_app/Abadon/components/exile/exile.main.tsx"],"sourcesContent":["import { useRef, useState } from \"react\";\r\nimport {\r\n  StyleSheet,\r\n  TouchableOpacity,\r\n  GestureResponderEvent,\r\n  Animated,\r\n  View,\r\n  Text,\r\n} from \"react-native\";\r\nimport Svg, { Circle } from \"react-native-svg\";\r\nimport PerntagramSvg from \"../assets/svg/Pentagram\";\r\nimport { Audio } from \"expo-av\";\r\n\r\nconst Exile = () => {\r\n  const [isPress, setIsPress] = useState<number>(0);\r\n  const [sound1, setSound1] = useState<Audio.Sound>();\r\n  const [sound2, setSound2] = useState<Audio.Sound>();\r\n  const anim = useRef(new Animated.Value(0)).current;\r\n  const callTime: number = 10000;\r\n  const resetTime: number = 1000;\r\n  const onPernagramPress = async (e) => {\r\n    const { sound } = await Audio.Sound.createAsync(\r\n      require(\"../../assets/sounds/excorcism.mp3\")\r\n    );\r\n    setSound1(sound);\r\n    sound.setVolumeAsync(1);\r\n    await sound.playAsync();\r\n    sound2.unloadAsync();\r\n    Animated.timing(anim, {\r\n      toValue: 100,\r\n      duration: callTime,\r\n      useNativeDriver: true,\r\n    }).start();\r\n    anim.addListener(({ value }) => setIsPress(value));\r\n  };\r\n  const onPernagramPressOut = async (event: GestureResponderEvent) => {\r\n    const { sound } = await Audio.Sound.createAsync(\r\n      require(\"../../assets/sounds/woman.mp3\")\r\n    );\r\n    setSound2(sound);\r\n    sound.setVolumeAsync(1);\r\n    await sound.playAsync();\r\n    if (isPress < 100) {\r\n      Animated.timing(anim, {\r\n        toValue: 0,\r\n        duration: resetTime,\r\n        useNativeDriver: true,\r\n      }).start();\r\n      setIsPress(0);\r\n    }\r\n    sound1.unloadAsync();\r\n  };\r\n  return (\r\n    <Animated.View style={styled.exileContainer}>\r\n      <TouchableOpacity\r\n        onPressIn={onPernagramPress}\r\n        onPressOut={onPernagramPressOut}\r\n      >\r\n        {/* <Svg viewBox=\"0 0 200 220\" style={{position:'absolute'}} height={300} width={300}>\r\n          <Circle\r\n            cx=\"100\"\r\n            cy=\"110\"\r\n            r=\"100\"\r\n            stroke=\"blue\"\r\n            strokeWidth=\"10\"\r\n            strokeOpacity={0.2}\r\n          />\r\n        </Svg> */}\r\n        <PerntagramSvg isPress={isPress} />\r\n      </TouchableOpacity>\r\n    </Animated.View>\r\n  );\r\n};\r\n\r\nconst styled = StyleSheet.create({\r\n  exileContainer: {\r\n    flex: 1,\r\n    backgroundColor: \"#64262C\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n});\r\n\r\nexport default Exile;\r\n"],"mappings":";;AAAA,SAASA,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAAC;AAAA;AAAA;AAUzC,OAAOC,aAAa;AACpB,SAASC,KAAK,QAAQ,SAAS;AAAC;AAEhC,IAAMC,KAAK,GAAG,SAARA,KAAK,GAAS;EAClB,gBAA8BH,QAAQ,CAAS,CAAC,CAAC;IAAA;IAA1CI,OAAO;IAAEC,UAAU;EAC1B,iBAA4BL,QAAQ,EAAe;IAAA;IAA5CM,MAAM;IAAEC,SAAS;EACxB,iBAA4BP,QAAQ,EAAe;IAAA;IAA5CQ,MAAM;IAAEC,SAAS;EACxB,IAAMC,IAAI,GAAGX,MAAM,CAAC,IAAIY,QAAQ,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,CAACC,OAAO;EAClD,IAAMC,QAAgB,GAAG,KAAK;EAC9B,IAAMC,SAAiB,GAAG,IAAI;EAC9B,IAAMC,gBAAgB;IAAA,6BAAG,WAAOC,CAAC,EAAK;MACpC,kCAAwBf,KAAK,CAACgB,KAAK,CAACC,WAAW,CAC7CC,OAAO,qCAAqC,CAC7C;QAFOC,KAAK,yBAALA,KAAK;MAGbd,SAAS,CAACc,KAAK,CAAC;MAChBA,KAAK,CAACC,cAAc,CAAC,CAAC,CAAC;MACvB,MAAMD,KAAK,CAACE,SAAS,EAAE;MACvBf,MAAM,CAACgB,WAAW,EAAE;MACpBb,QAAQ,CAACc,MAAM,CAACf,IAAI,EAAE;QACpBgB,OAAO,EAAE,GAAG;QACZC,QAAQ,EAAEb,QAAQ;QAClBc,eAAe,EAAE;MACnB,CAAC,CAAC,CAACC,KAAK,EAAE;MACVnB,IAAI,CAACoB,WAAW,CAAC;QAAA,IAAGC,KAAK,SAALA,KAAK;QAAA,OAAO1B,UAAU,CAAC0B,KAAK,CAAC;MAAA,EAAC;IACpD,CAAC;IAAA,gBAdKf,gBAAgB;MAAA;IAAA;EAAA,GAcrB;EACD,IAAMgB,mBAAmB;IAAA,8BAAG,WAAOC,KAA4B,EAAK;MAClE,mCAAwB/B,KAAK,CAACgB,KAAK,CAACC,WAAW,CAC7CC,OAAO,iCAAiC,CACzC;QAFOC,KAAK,0BAALA,KAAK;MAGbZ,SAAS,CAACY,KAAK,CAAC;MAChBA,KAAK,CAACC,cAAc,CAAC,CAAC,CAAC;MACvB,MAAMD,KAAK,CAACE,SAAS,EAAE;MACvB,IAAInB,OAAO,GAAG,GAAG,EAAE;QACjBO,QAAQ,CAACc,MAAM,CAACf,IAAI,EAAE;UACpBgB,OAAO,EAAE,CAAC;UACVC,QAAQ,EAAEZ,SAAS;UACnBa,eAAe,EAAE;QACnB,CAAC,CAAC,CAACC,KAAK,EAAE;QACVxB,UAAU,CAAC,CAAC,CAAC;MACf;MACAC,MAAM,CAACkB,WAAW,EAAE;IACtB,CAAC;IAAA,gBAhBKQ,mBAAmB;MAAA;IAAA;EAAA,GAgBxB;EACD,OACE,KAAC,QAAQ,CAAC,IAAI;IAAC,KAAK,EAAEE,MAAM,CAACC,cAAe;IAAA,UAC1C,KAAC,gBAAgB;MACf,SAAS,EAAEnB,gBAAiB;MAC5B,UAAU,EAAEgB,mBAAoB;MAAA,UAYhC,KAAC,aAAa;QAAC,OAAO,EAAE5B;MAAQ;IAAG;EAClB,EACL;AAEpB,CAAC;AAED,IAAM8B,MAAM,GAAGE,UAAU,CAACC,MAAM,CAAC;EAC/BF,cAAc,EAAE;IACdG,IAAI,EAAE,CAAC;IACPC,eAAe,EAAE,SAAS;IAC1BC,UAAU,EAAE,QAAQ;IACpBC,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AAEF,eAAetC,KAAK"},"metadata":{},"sourceType":"module"}